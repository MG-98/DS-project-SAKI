constraint Zone2001 oftype RangeConstraint {
  lowerBound:  2001;
  lowerBoundInclusive : true;
  upperBound : 2001;
  upperBoundInclusive : true;
}

valuetype Int oftype integer{
	constraints : [Zone2001];
}

constraint GeoCoordinateRange oftype RangeConstraint {
  lowerBound: -90 ;
  lowerBoundInclusive : true;
  upperBound : 90;
  upperBoundInclusive : true;
}

valuetype Geo oftype decimal{
	constraints : [GeoCoordinateRange];
}

pipeline GtfsPipeline {

	block GtfsExtractor oftype HttpExtractor {
		url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
	}

	pipe {
		from: GtfsExtractor;
		to: ZipArchiveInterpreter;
	}

	block ZipArchiveInterpreter oftype ArchiveInterpreter {
		archiveType: "zip";
		}


	pipe {
		from: ZipArchiveInterpreter;
		to: StopFilePicker;
	}

	block StopFilePicker oftype FilePicker {
		path: "/stops.txt";
		}

	pipe {
		from: StopFilePicker;
		to: GtfsTextFileInterpreter;
	}

	block GtfsTextFileInterpreter oftype TextFileInterpreter {
		//encoding;
		
	}

	pipe {
		from: GtfsTextFileInterpreter;
		to: CarsTextFileCleaner;
	}

	block CarsTextFileCleaner oftype TextRangeSelector {
		lineFrom : 2;
	}

	pipe {
		from: CarsTextFileCleaner;
		to: GtfsCSVInterpreter;
	}


    block GtfsCSVInterpreter oftype CSVInterpreter {
		delimiter: '"';
		enclosingEscape: ",";

	}

	pipe {
		from: GtfsCSVInterpreter;
		to: GtfsColumnDeleter;
	}

	
	block GtfsColumnDeleter oftype ColumnDeleter {
		delete: [column A , column C , column D , column E , column G , column H,column I , column K, column M,column O];
	}

	pipe {
		from: GtfsColumnDeleter;
		to: GtfsTableInterpreter;
	}

	block GtfsTableInterpreter oftype TableInterpreter {
		header: false;
		columns: [
			"stop_id" oftype integer,
			"stop_name" oftype text,
			"stop_lat" oftype Geo,
			"stop_lon" oftype Geo,
			"zone_id" oftype Int
        ];
	}

	pipe {
		from: GtfsTableInterpreter;
		to: GtfsLoader;
	}

	block GtfsLoader oftype SQLiteLoader {
		table: "stops";
		file: "./gtfs.sqlite";
	}
	
}
